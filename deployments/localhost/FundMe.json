{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "s_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Funded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x44960fdf6c511e847d3534453022071a7d488d6e73abc865f331dc94dc4747c2",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "864322",
    "logsBloom": "0x
    "blockHash": "0x21de42e5899f62285f6318f13bd50b3149a06c6607650a0661dc5d7f168898bb",
    "transactionHash": "0x44960fdf6c511e847d3534453022071a7d488d6e73abc865f331dc94dc4747c2",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "864322",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "30dbab1e520dfeb224cd526a891966b3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Funded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A Sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds our contract based on the ETH/USD price\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n/**\\n * @title A Sample Funding Contract\\n * @notice This contract is for creating a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    //State variable\\n    event Funded(address indexed from, uint256 amount);\\n    uint256 public constant MINIMUM_USD = 5 * 10**18; //or 50 * 1e18;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address private immutable i_owner;\\n    AggregatorV3Interface public s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        //require(msg.sender == i_owner, \\\"Sender is not owner\\\");\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        } //thi is more gas-efficient\\n        _; //This means the rest of the code should be executed if the condition above is met;\\n    }\\n\\n    constructor(address s_priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\\n    }\\n\\n    /**\\n     * @notice This function funds our contract based on the ETH/USD price\\n     * @dev This implements price feeds as our library\\n     */\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"Didn't send enough! You need to spend more ETH\\\"\\n        );\\n        s_addressToAmountFunded[msg.sender] += msg.value; //We increase the amount once the account is funded\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (uint256 i = 0; i < s_funders.length; i++) {\\n            address funder = s_funders[i];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        //reset the array\\n        s_funders = new address[](0);\\n        //Below are ways we send or tranfer ether:\\n        //Transfer\\n        //payable(msg.sender).transfer(address(this).balance); //It returns nothing. It authomatically revert the amount. \\\"this\\\" keyword means everything in the contract above.\\n\\n        //Send\\n        //bool sendSuccess = payable(msg.sender).send(address(this).balance); //It returns bool;\\n        //require(sendSuccess, \\\"Send failed\\\");\\n\\n        //Call\\n        // (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        // require(success);\\n        (bool success, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xcb4fbab101a298d1d0e80916c1aa52ca57eb60e62b71b5db248b91d90eae7f6b\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        //To consume price data, your smart contract should reference AggregatorV3Interface;\\n        //We need: 1. ABI (To get the ABI, we need the interface)\\n        //2. Address(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e)/\\n        //To interact with another external or internal contract ABI and address.\\n        //In this case we need to reference AggregatorV3Interface which is a function under contract PriceConsumerV3\\n        //In oder word, to achieve interface, we need ABI and address as shown below\\n        // Goerli ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // );\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        //ETH in terms of USD\\n        return uint256(price * 1e10); //This is type-casting. //1**10 == 10000000000\\n    }\\n\\n    // function getVersion() internal view returns (uint256) {\\n    //     // ETH/USD price feed address of Goerli Network.\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n    //         0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n    //     );\\n    //     return priceFeed.version();\\n    // }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000; //or 1e18; //We are dividing by 1e18 because ethPrice * ethAmount would give us 1e36\\n        // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x284752a94c5ac96984ce7b547c695b7d91c1d861713710e558f439533eb1526c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610f9f380380610f9f83398181016040528101906100329190610110565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061013d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dd826100b2565b9050919050565b6100ed816100d2565b81146100f857600080fd5b50565b60008151905061010a816100e4565b92915050565b600060208284031215610126576101256100ad565b5b6000610134848285016100fb565b91505092915050565b608051610e4061015f6000396000818161023801526104860152610e406000f3fe60806040526004361061007b5760003560e01c8063893d20e81161004e578063893d20e81461012a5780639e87a5cd14610155578063b60d428814610180578063d7b4750c1461018a5761007b565b80630343fb25146100805780630ec3b027146100bd5780633ccfd60b146100e85780636b69a592146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a2919061082c565b6101c7565b6040516100b49190610872565b60405180910390f35b3480156100c957600080fd5b506100d2610210565b6040516100df91906108ec565b60405180910390f35b3480156100f457600080fd5b506100fd610236565b005b34801561010b57600080fd5b50610114610476565b6040516101219190610872565b60405180910390f35b34801561013657600080fd5b5061013f610482565b60405161014c9190610916565b60405180910390f35b34801561016157600080fd5b5061016a6104aa565b60405161017791906108ec565b60405180910390f35b6101886104d4565b005b34801561019657600080fd5b506101b160048036038101906101ac919061095d565b61060e565b6040516101be9190610916565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102bb576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103665760008082815481106102e0576102df61098a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061035e906109e8565b9150506102be565b50600067ffffffffffffffff81111561038257610381610a30565b5b6040519080825280602002602001820160405280156103b05781602001602082028036833780820191505090505b50600090805190602001906103c6929190610722565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103ed90610a90565b60006040518083038185875af1925050503d806000811461042a576040519150601f19603f3d011682016040523d82523d6000602084013e61042f565b606091505b5050905080610473576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046a90610b02565b60405180910390fd5b50565b674563918244f4000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b674563918244f40000610512600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461065590919063ffffffff16565b1015610553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054a90610b94565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105a29190610bb4565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008082815481106106235761062261098a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061066183610691565b90506000670de0b6b3a7640000858361067a9190610be8565b6106849190610c59565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156106df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107039190610d17565b5050509150506402540be4008161071a9190610d92565b915050919050565b82805482825590600052602060002090810192821561079b579160200282015b8281111561079a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610742565b5b5090506107a891906107ac565b5090565b5b808211156107c55760008160009055506001016107ad565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107f9826107ce565b9050919050565b610809816107ee565b811461081457600080fd5b50565b60008135905061082681610800565b92915050565b600060208284031215610842576108416107c9565b5b600061085084828501610817565b91505092915050565b6000819050919050565b61086c81610859565b82525050565b60006020820190506108876000830184610863565b92915050565b6000819050919050565b60006108b26108ad6108a8846107ce565b61088d565b6107ce565b9050919050565b60006108c482610897565b9050919050565b60006108d6826108b9565b9050919050565b6108e6816108cb565b82525050565b600060208201905061090160008301846108dd565b92915050565b610910816107ee565b82525050565b600060208201905061092b6000830184610907565b92915050565b61093a81610859565b811461094557600080fd5b50565b60008135905061095781610931565b92915050565b600060208284031215610973576109726107c9565b5b600061098184828501610948565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109f382610859565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a2557610a246109b9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a7a600083610a5f565b9150610a8582610a6a565b600082019050919050565b6000610a9b82610a6d565b9150819050919050565b600082825260208201905092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000610aec600f83610aa5565b9150610af782610ab6565b602082019050919050565b60006020820190508181036000830152610b1b81610adf565b9050919050565b7f4469646e27742073656e6420656e6f7567682120596f75206e65656420746f2060008201527f7370656e64206d6f726520455448000000000000000000000000000000000000602082015250565b6000610b7e602e83610aa5565b9150610b8982610b22565b604082019050919050565b60006020820190508181036000830152610bad81610b71565b9050919050565b6000610bbf82610859565b9150610bca83610859565b9250828201905080821115610be257610be16109b9565b5b92915050565b6000610bf382610859565b9150610bfe83610859565b9250828202610c0c81610859565b91508282048414831517610c2357610c226109b9565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c6482610859565b9150610c6f83610859565b925082610c7f57610c7e610c2a565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ca981610c8a565b8114610cb457600080fd5b50565b600081519050610cc681610ca0565b92915050565b6000819050919050565b610cdf81610ccc565b8114610cea57600080fd5b50565b600081519050610cfc81610cd6565b92915050565b600081519050610d1181610931565b92915050565b600080600080600060a08688031215610d3357610d326107c9565b5b6000610d4188828901610cb7565b9550506020610d5288828901610ced565b9450506040610d6388828901610d02565b9350506060610d7488828901610d02565b9250506080610d8588828901610cb7565b9150509295509295909350565b6000610d9d82610ccc565b9150610da883610ccc565b9250828202610db681610ccc565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610dee57610ded6109b9565b5b8282058414831517610e0357610e026109b9565b5b509291505056fea26469706673582212204bb4140dccbcebb2336a8d870a72c4a53ebb819f6349130ac39726f49b84bbd264736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063893d20e81161004e578063893d20e81461012a5780639e87a5cd14610155578063b60d428814610180578063d7b4750c1461018a5761007b565b80630343fb25146100805780630ec3b027146100bd5780633ccfd60b146100e85780636b69a592146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a2919061082c565b6101c7565b6040516100b49190610872565b60405180910390f35b3480156100c957600080fd5b506100d2610210565b6040516100df91906108ec565b60405180910390f35b3480156100f457600080fd5b506100fd610236565b005b34801561010b57600080fd5b50610114610476565b6040516101219190610872565b60405180910390f35b34801561013657600080fd5b5061013f610482565b60405161014c9190610916565b60405180910390f35b34801561016157600080fd5b5061016a6104aa565b60405161017791906108ec565b60405180910390f35b6101886104d4565b005b34801561019657600080fd5b506101b160048036038101906101ac919061095d565b61060e565b6040516101be9190610916565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102bb576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103665760008082815481106102e0576102df61098a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061035e906109e8565b9150506102be565b50600067ffffffffffffffff81111561038257610381610a30565b5b6040519080825280602002602001820160405280156103b05781602001602082028036833780820191505090505b50600090805190602001906103c6929190610722565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103ed90610a90565b60006040518083038185875af1925050503d806000811461042a576040519150601f19603f3d011682016040523d82523d6000602084013e61042f565b606091505b5050905080610473576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046a90610b02565b60405180910390fd5b50565b674563918244f4000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b674563918244f40000610512600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461065590919063ffffffff16565b1015610553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054a90610b94565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105a29190610bb4565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008082815481106106235761062261098a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061066183610691565b90506000670de0b6b3a7640000858361067a9190610be8565b6106849190610c59565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156106df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107039190610d17565b5050509150506402540be4008161071a9190610d92565b915050919050565b82805482825590600052602060002090810192821561079b579160200282015b8281111561079a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610742565b5b5090506107a891906107ac565b5090565b5b808211156107c55760008160009055506001016107ad565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107f9826107ce565b9050919050565b610809816107ee565b811461081457600080fd5b50565b60008135905061082681610800565b92915050565b600060208284031215610842576108416107c9565b5b600061085084828501610817565b91505092915050565b6000819050919050565b61086c81610859565b82525050565b60006020820190506108876000830184610863565b92915050565b6000819050919050565b60006108b26108ad6108a8846107ce565b61088d565b6107ce565b9050919050565b60006108c482610897565b9050919050565b60006108d6826108b9565b9050919050565b6108e6816108cb565b82525050565b600060208201905061090160008301846108dd565b92915050565b610910816107ee565b82525050565b600060208201905061092b6000830184610907565b92915050565b61093a81610859565b811461094557600080fd5b50565b60008135905061095781610931565b92915050565b600060208284031215610973576109726107c9565b5b600061098184828501610948565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109f382610859565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a2557610a246109b9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a7a600083610a5f565b9150610a8582610a6a565b600082019050919050565b6000610a9b82610a6d565b9150819050919050565b600082825260208201905092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000610aec600f83610aa5565b9150610af782610ab6565b602082019050919050565b60006020820190508181036000830152610b1b81610adf565b9050919050565b7f4469646e27742073656e6420656e6f7567682120596f75206e65656420746f2060008201527f7370656e64206d6f726520455448000000000000000000000000000000000000602082015250565b6000610b7e602e83610aa5565b9150610b8982610b22565b604082019050919050565b60006020820190508181036000830152610bad81610b71565b9050919050565b6000610bbf82610859565b9150610bca83610859565b9250828201905080821115610be257610be16109b9565b5b92915050565b6000610bf382610859565b9150610bfe83610859565b9250828202610c0c81610859565b91508282048414831517610c2357610c226109b9565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c6482610859565b9150610c6f83610859565b925082610c7f57610c7e610c2a565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ca981610c8a565b8114610cb457600080fd5b50565b600081519050610cc681610ca0565b92915050565b6000819050919050565b610cdf81610ccc565b8114610cea57600080fd5b50565b600081519050610cfc81610cd6565b92915050565b600081519050610d1181610931565b92915050565b600080600080600060a08688031215610d3357610d326107c9565b5b6000610d4188828901610cb7565b9550506020610d5288828901610ced565b9450506040610d6388828901610d02565b9350506060610d7488828901610d02565b9250506080610d8588828901610cb7565b9150509295509295909350565b6000610d9d82610ccc565b9150610da883610ccc565b9250828202610db681610ccc565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610dee57610ded6109b9565b5b8282058414831517610e0357610e026109b9565b5b509291505056fea26469706673582212204bb4140dccbcebb2336a8d870a72c4a53ebb819f6349130ac39726f49b84bbd264736f6c63430008110033",
  "devdoc": {
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      }
    },
    "title": "A Sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds our contract based on the ETH/USD price"
      }
    },
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 75,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 80,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}