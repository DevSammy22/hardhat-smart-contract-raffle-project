{
    "language": "Solidity",
    "sources": {
        "contracts/FundMe.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nimport \"./PriceConverter.sol\";\r\nerror NotOwner();\r\n\r\ncontract FundMe{\r\n      // Type Declarations\r\n    using PriceConverter for uint256;\r\n    \r\n    //State variables\r\n    event Funded(address indexed from, uint256 amount);\r\n    uint256 public constant MINIMUM_USD = 5 * 10 ** 18; //or 50 * 1e18;\r\n    //constant and immutable are gas optimiation tools\r\n    //The difference between constant and immutable is that:\r\n    //Constant can not be changed once declared and also, it is assigned once declared\r\n    //Immutable can be changed, and can be declared and afterwards assigned\r\n    //21,425 gas - constant\r\n    //23,515 gas - non-constant\r\n    //21,415 * 141000000000 = $9.058545\r\n    //23,515 * 141000000000 = $9.946845\r\n   \r\n    address[] public funders;\r\n    mapping(address => uint256) public addressToAmountFunded;\r\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\r\n    address public /* immutable */ i_owner; //i_owner - the style of names shows that the variable is immutable //This is to set the owner of the contract\r\n    //21,508 gas - immutable\r\n    //23,644 gas - non-immutable\r\n     AggregatorV3Interface public i_priceFeed;\r\n\r\n    constructor(address priceFeedAddress){\r\n        i_owner = msg.sender;\r\n        i_priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    function fund() public payable{\r\n        //Want to be able to set a minimum fund amount in USD\r\n        //We converted ethereum to usd as shown below (this is possible using chainlink and oracle)\r\n        require(msg.value.getConversionRate(i_priceFeed) >= MINIMUM_USD, \"Didn't send enough!\"); //1e18 == 1*10**18\r\n        addressToAmountFunded[msg.sender] += msg.value; //We increase the amount once the account is funded\r\n        funders.push(msg.sender);\r\n        //emit Funded(msg.sender, msg.value);\r\n        //msg.value(uint) indicates how much ETH or blockchain currency we send i.e the number of wei sent with the message\r\n        //msg.sender(address) indicates the address of the sender\r\n        //keyword payable makes fund function red.\r\n        //msg.value and msg.callvalue can only be used in payable public functions\r\n        //Money math is done in terms of wei, So 1ETH needs to be set as 1e18 value\r\n    }\r\n\r\n   // function getPrice() public view returns(uint256) {\r\n    //     //To consume price data, your smart contract should reference AggregatorV3Interface;\r\n    //     //We need: 1. ABI (To get the ABI, we need the interface)\r\n    //     //2. Address(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e)/\r\n    //     //To interact with another external or internal contract ABI and address.\r\n    //     //In this case we need to reference AggregatorV3Interface which is a function under contract PriceConsumerV3\r\n    //     //In oder word, to achieve interface, we need ABI and address as shown below\r\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\r\n    //     (,int256 price,,,) = priceFeed.latestRoundData();\r\n    //     //ETH in terms of USD\r\n    //     return uint256(price * 1e10); //This is type-casting. //1**10 == 10000000000\r\n    // }\r\n\r\n    // function getVersion() public view returns(uint256){\r\n    //     // ETH/USD price feed address of Goerli Network.\r\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\r\n    //     return priceFeed.version();\r\n    // }\r\n \r\n    // function getConversionRate(uint256 ethAmount) public view returns (uint256){\r\n    //     uint256 ethPrice = getPrice();\r\n    //     uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; //We are dividing by 1e18 because ethPrice * ethAmount would give us 1e36\r\n    //     return ethAmountInUsd;\r\n    // }\r\n\r\n    function withdraw() public onlyOwner {\r\n        for(uint256 i = 0; i < funders.length; i++){\r\n            address funder = funders[i];\r\n            addressToAmountFunded[funder] = 0;\r\n        }\r\n        //reset the array\r\n        funders = new address[](0);\r\n        //Below are ways we send or tranfer ether:\r\n        //Transfer\r\n        //payable(msg.sender).transfer(address(this).balance); //It returns nothing. It authomatically revert the amountthis keyword means everything in the contract above.\r\n        \r\n        //Send\r\n        //bool sendSuccess = payable(msg.sender).send(address(this).balance); //It returns bool;\r\n        //require(sendSuccess, \"Send failed\");\r\n        \r\n        //Call\r\n        // (bool success, ) = i_owner.call{value: address(this).balance}(\"\");\r\n        // require(success);\r\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(callSuccess, \"Call failed\");\r\n\r\n    }\r\n    \r\n    modifier onlyOwner{\r\n        //require(msg.sender == i_owner, \"Sender is not owner\");\r\n        if(msg.sender != i_owner){\r\n            revert NotOwner();\r\n        } //thi is more gas-efficient\r\n        _; //This means the rest of the code should be executed if the condition above is met;\r\n    }\r\n\r\n    //What happens if someone sends this contract ETH without calling the fund function\r\n    receive() external payable{\r\n        fund();\r\n    }\r\n    fallback() external payable{\r\n        fund();\r\n    }\r\n\r\n    // Explainer from: https://solidity-by-example.org/fallback/\r\n    // Ether is sent to contract\r\n    //      is msg.data empty?\r\n    //          /   \\ \r\n    //         yes  no\r\n    //         /     \\\r\n    //    receive()?  fallback() \r\n    //     /   \\ \r\n    //   yes   no\r\n    //  /        \\\r\n    //receive()  fallback()\r\n}\r\n\r\n//In the deploy plugin, the withdraw is orange because we are not paying (i.e it is not a payable function)\r\n//Fund is red because it is a payable function."
        },
        "contracts/PriceConverter.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        //To consume price data, your smart contract should reference AggregatorV3Interface;\r\n        //We need: 1. ABI (To get the ABI, we need the interface)\r\n        //2. Address(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e)/\r\n        //To interact with another external or internal contract ABI and address.\r\n        //In this case we need to reference AggregatorV3Interface which is a function under contract PriceConsumerV3\r\n        //In oder word, to achieve interface, we need ABI and address as shown below\r\n        // Goerli ETH / USD Address\r\n        // https://docs.chain.link/docs/ethereum-addresses/\r\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\r\n        // );\r\n        (, int256 price, , , ) = priceFeed.latestRoundData();\r\n        //ETH in terms of USD\r\n        return uint256(price * 1e10); //This is type-casting. //1**10 == 10000000000\r\n    }\r\n\r\n    // function getVersion() internal view returns (uint256) {\r\n    //     // ETH/USD price feed address of Goerli Network.\r\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n    //         0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\r\n    //     );\r\n    //     return priceFeed.version();\r\n    // }\r\n\r\n    function getConversionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000; //or 1e18; //We are dividing by 1e18 because ethPrice * ethAmount would give us 1e36\r\n        // the actual ETH/USD conversation rate, after adjusting the extra 0s.\r\n        return ethAmountInUsd;\r\n    }\r\n}\r\n"
        },
        "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.gasEstimates"
                ],
                "": ["ast"]
            }
        },
        "metadata": {
            "useLiteralContent": true
        }
    }
}
