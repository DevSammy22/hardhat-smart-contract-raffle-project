{
    "address": "0x879a1cD61eDCF8d7F9f4c9BC6187826FB814F688",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeedAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "NotOwner",
            "type": "error"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "Funded",
            "type": "event"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "addressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "funders",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "i_owner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "i_priceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0xbd877174e2636b553ec72be50e30ce4270e0862f9fadcb4b22f31ecc402bdc33",
    "receipt": {
        "to": null,
        "from": "0xb55f91Ad66f7524492298F58CB61561d65420331",
        "contractAddress": "0x879a1cD61eDCF8d7F9f4c9BC6187826FB814F688",
        "transactionIndex": 88,
        "gasUsed": "850981",
        "logsBloom": "0x
        "blockHash": "0xcedc5ee922bcfda03e8d7c51c83f8cdc376b9d61dad36b53eb768f7641dbad73",
        "transactionHash": "0xbd877174e2636b553ec72be50e30ce4270e0862f9fadcb4b22f31ecc402bdc33",
        "logs": [],
        "blockNumber": 7834810,
        "cumulativeGasUsed": "20484911",
        "status": 1,
        "byzantium": true
    },
    "args": ["0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"],
    "numDeployments": 1,
    "solcInputHash": "3a9f81483e5217bbfa998d994aeab052",
    "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Funded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\nerror NotOwner();\\r\\n\\r\\ncontract FundMe{\\r\\n      // Type Declarations\\r\\n    using PriceConverter for uint256;\\r\\n    \\r\\n    //State variables\\r\\n    event Funded(address indexed from, uint256 amount);\\r\\n    uint256 public constant MINIMUM_USD = 5 * 10 ** 18; //or 50 * 1e18;\\r\\n    //constant and immutable are gas optimiation tools\\r\\n    //The difference between constant and immutable is that:\\r\\n    //Constant can not be changed once declared and also, it is assigned once declared\\r\\n    //Immutable can be changed, and can be declared and afterwards assigned\\r\\n    //21,425 gas - constant\\r\\n    //23,515 gas - non-constant\\r\\n    //21,415 * 141000000000 = $9.058545\\r\\n    //23,515 * 141000000000 = $9.946845\\r\\n   \\r\\n    address[] public funders;\\r\\n    mapping(address => uint256) public addressToAmountFunded;\\r\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\r\\n    address public /* immutable */ i_owner; //i_owner - the style of names shows that the variable is immutable //This is to set the owner of the contract\\r\\n    //21,508 gas - immutable\\r\\n    //23,644 gas - non-immutable\\r\\n     AggregatorV3Interface public i_priceFeed;\\r\\n\\r\\n    constructor(address priceFeedAddress){\\r\\n        i_owner = msg.sender;\\r\\n        i_priceFeed = AggregatorV3Interface(priceFeedAddress);\\r\\n    }\\r\\n\\r\\n    function fund() public payable{\\r\\n        //Want to be able to set a minimum fund amount in USD\\r\\n        //We converted ethereum to usd as shown below (this is possible using chainlink and oracle)\\r\\n        require(msg.value.getConversionRate(i_priceFeed) >= MINIMUM_USD, \\\"Didn't send enough!\\\"); //1e18 == 1*10**18\\r\\n        addressToAmountFunded[msg.sender] += msg.value; //We increase the amount once the account is funded\\r\\n        funders.push(msg.sender);\\r\\n        //emit Funded(msg.sender, msg.value);\\r\\n        //msg.value(uint) indicates how much ETH or blockchain currency we send i.e the number of wei sent with the message\\r\\n        //msg.sender(address) indicates the address of the sender\\r\\n        //keyword payable makes fund function red.\\r\\n        //msg.value and msg.callvalue can only be used in payable public functions\\r\\n        //Money math is done in terms of wei, So 1ETH needs to be set as 1e18 value\\r\\n    }\\r\\n\\r\\n   // function getPrice() public view returns(uint256) {\\r\\n    //     //To consume price data, your smart contract should reference AggregatorV3Interface;\\r\\n    //     //We need: 1. ABI (To get the ABI, we need the interface)\\r\\n    //     //2. Address(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e)/\\r\\n    //     //To interact with another external or internal contract ABI and address.\\r\\n    //     //In this case we need to reference AggregatorV3Interface which is a function under contract PriceConsumerV3\\r\\n    //     //In oder word, to achieve interface, we need ABI and address as shown below\\r\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\\r\\n    //     (,int256 price,,,) = priceFeed.latestRoundData();\\r\\n    //     //ETH in terms of USD\\r\\n    //     return uint256(price * 1e10); //This is type-casting. //1**10 == 10000000000\\r\\n    // }\\r\\n\\r\\n    // function getVersion() public view returns(uint256){\\r\\n    //     // ETH/USD price feed address of Goerli Network.\\r\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\\r\\n    //     return priceFeed.version();\\r\\n    // }\\r\\n \\r\\n    // function getConversionRate(uint256 ethAmount) public view returns (uint256){\\r\\n    //     uint256 ethPrice = getPrice();\\r\\n    //     uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; //We are dividing by 1e18 because ethPrice * ethAmount would give us 1e36\\r\\n    //     return ethAmountInUsd;\\r\\n    // }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        for(uint256 i = 0; i < funders.length; i++){\\r\\n            address funder = funders[i];\\r\\n            addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        //reset the array\\r\\n        funders = new address[](0);\\r\\n        //Below are ways we send or tranfer ether:\\r\\n        //Transfer\\r\\n        //payable(msg.sender).transfer(address(this).balance); //It returns nothing. It authomatically revert the amountthis keyword means everything in the contract above.\\r\\n        \\r\\n        //Send\\r\\n        //bool sendSuccess = payable(msg.sender).send(address(this).balance); //It returns bool;\\r\\n        //require(sendSuccess, \\\"Send failed\\\");\\r\\n        \\r\\n        //Call\\r\\n        // (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\r\\n        // require(success);\\r\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(callSuccess, \\\"Call failed\\\");\\r\\n\\r\\n    }\\r\\n    \\r\\n    modifier onlyOwner{\\r\\n        //require(msg.sender == i_owner, \\\"Sender is not owner\\\");\\r\\n        if(msg.sender != i_owner){\\r\\n            revert NotOwner();\\r\\n        } //thi is more gas-efficient\\r\\n        _; //This means the rest of the code should be executed if the condition above is met;\\r\\n    }\\r\\n\\r\\n    //What happens if someone sends this contract ETH without calling the fund function\\r\\n    receive() external payable{\\r\\n        fund();\\r\\n    }\\r\\n    fallback() external payable{\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n    // Explainer from: https://solidity-by-example.org/fallback/\\r\\n    // Ether is sent to contract\\r\\n    //      is msg.data empty?\\r\\n    //          /   \\\\ \\r\\n    //         yes  no\\r\\n    //         /     \\\\\\r\\n    //    receive()?  fallback() \\r\\n    //     /   \\\\ \\r\\n    //   yes   no\\r\\n    //  /        \\\\\\r\\n    //receive()  fallback()\\r\\n}\\r\\n\\r\\n//In the deploy plugin, the withdraw is orange because we are not paying (i.e it is not a payable function)\\r\\n//Fund is red because it is a payable function.\",\"keccak256\":\"0x6c99d44c3e0ea0920d12749250eb1370bdbb7a021b39a7931ccf7fad83a4ddd9\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    function getPrice(AggregatorV3Interface priceFeed)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        //To consume price data, your smart contract should reference AggregatorV3Interface;\\r\\n        //We need: 1. ABI (To get the ABI, we need the interface)\\r\\n        //2. Address(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e)/\\r\\n        //To interact with another external or internal contract ABI and address.\\r\\n        //In this case we need to reference AggregatorV3Interface which is a function under contract PriceConsumerV3\\r\\n        //In oder word, to achieve interface, we need ABI and address as shown below\\r\\n        // Goerli ETH / USD Address\\r\\n        // https://docs.chain.link/docs/ethereum-addresses/\\r\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\r\\n        // );\\r\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\r\\n        //ETH in terms of USD\\r\\n        return uint256(price * 1e10); //This is type-casting. //1**10 == 10000000000\\r\\n    }\\r\\n\\r\\n    // function getVersion() internal view returns (uint256) {\\r\\n    //     // ETH/USD price feed address of Goerli Network.\\r\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n    //         0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\r\\n    //     );\\r\\n    //     return priceFeed.version();\\r\\n    // }\\r\\n\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000; //or 1e18; //We are dividing by 1e18 because ethPrice * ethAmount would give us 1e36\\r\\n        // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf684182746bc97e7a95de741e5cf02b5d1adb8444a9babe4443e80a0fb5a03dc\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x608060405234801561001057600080fd5b50604051610ef2380380610ef28339818101604052810190610032919061011d565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061014a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ea826100bf565b9050919050565b6100fa816100df565b811461010557600080fd5b50565b600081519050610117816100f1565b92915050565b600060208284031215610133576101326100ba565b5b600061014184828501610108565b91505092915050565b610d99806101596000396000f3fe6080604052600436106100745760003560e01c8063957b89561161004e578063957b89561461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e3565b005b3480156100b057600080fd5b506100cb60048036038101906100c691906107ab565b610525565b6040516100d891906107f1565b60405180910390f35b3480156100ed57600080fd5b506100f661053d565b60405161010391906107f1565b60405180910390f35b34801561011857600080fd5b50610121610549565b60405161012e919061086b565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661056f565b6040516101639190610895565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108dc565b610595565b6040516101a09190610895565b60405180910390f35b674563918244f400006101e7600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105d490919063ffffffff16565b1015610228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021f90610966565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461027791906109b5565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036a576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561041557600080828154811061038f5761038e6109e9565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040d90610a18565b91505061036d565b50600067ffffffffffffffff81111561043157610430610a60565b5b60405190808252806020026020018201604052801561045f5781602001602082028036833780820191505090505b50600090805190602001906104759291906106a1565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049c90610ac0565b60006040518083038185875af1925050503d80600081146104d9576040519150601f19603f3d011682016040523d82523d6000602084013e6104de565b606091505b5050905080610522576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051990610b21565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b674563918244f4000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081815481106105a557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105e083610610565b90506000670de0b6b3a764000085836105f99190610b41565b6106039190610bb2565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561065e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106829190610c70565b5050509150506402540be400816106999190610ceb565b915050919050565b82805482825590600052602060002090810192821561071a579160200282015b828111156107195782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106c1565b5b509050610727919061072b565b5090565b5b8082111561074457600081600090555060010161072c565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107788261074d565b9050919050565b6107888161076d565b811461079357600080fd5b50565b6000813590506107a58161077f565b92915050565b6000602082840312156107c1576107c0610748565b5b60006107cf84828501610796565b91505092915050565b6000819050919050565b6107eb816107d8565b82525050565b600060208201905061080660008301846107e2565b92915050565b6000819050919050565b600061083161082c6108278461074d565b61080c565b61074d565b9050919050565b600061084382610816565b9050919050565b600061085582610838565b9050919050565b6108658161084a565b82525050565b6000602082019050610880600083018461085c565b92915050565b61088f8161076d565b82525050565b60006020820190506108aa6000830184610886565b92915050565b6108b9816107d8565b81146108c457600080fd5b50565b6000813590506108d6816108b0565b92915050565b6000602082840312156108f2576108f1610748565b5b6000610900848285016108c7565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b6000610950601383610909565b915061095b8261091a565b602082019050919050565b6000602082019050818103600083015261097f81610943565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109c0826107d8565b91506109cb836107d8565b92508282019050808211156109e3576109e2610986565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a23826107d8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a5557610a54610986565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610aaa600083610a8f565b9150610ab582610a9a565b600082019050919050565b6000610acb82610a9d565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b0b600b83610909565b9150610b1682610ad5565b602082019050919050565b60006020820190508181036000830152610b3a81610afe565b9050919050565b6000610b4c826107d8565b9150610b57836107d8565b9250828202610b65816107d8565b91508282048414831517610b7c57610b7b610986565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610bbd826107d8565b9150610bc8836107d8565b925082610bd857610bd7610b83565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c0281610be3565b8114610c0d57600080fd5b50565b600081519050610c1f81610bf9565b92915050565b6000819050919050565b610c3881610c25565b8114610c4357600080fd5b50565b600081519050610c5581610c2f565b92915050565b600081519050610c6a816108b0565b92915050565b600080600080600060a08688031215610c8c57610c8b610748565b5b6000610c9a88828901610c10565b9550506020610cab88828901610c46565b9450506040610cbc88828901610c5b565b9350506060610ccd88828901610c5b565b9250506080610cde88828901610c10565b9150509295509295909350565b6000610cf682610c25565b9150610d0183610c25565b9250828202610d0f81610c25565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610d4757610d46610986565b5b8282058414831517610d5c57610d5b610986565b5b509291505056fea264697066735822122017fec8539fbf1f53e4d03e3eecbc7d032957244ab10cc3ff33caaa9192561a8a64736f6c63430008110033",
    "deployedBytecode": "0x6080604052600436106100745760003560e01c8063957b89561161004e578063957b89561461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e3565b005b3480156100b057600080fd5b506100cb60048036038101906100c691906107ab565b610525565b6040516100d891906107f1565b60405180910390f35b3480156100ed57600080fd5b506100f661053d565b60405161010391906107f1565b60405180910390f35b34801561011857600080fd5b50610121610549565b60405161012e919061086b565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661056f565b6040516101639190610895565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108dc565b610595565b6040516101a09190610895565b60405180910390f35b674563918244f400006101e7600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105d490919063ffffffff16565b1015610228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021f90610966565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461027791906109b5565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036a576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561041557600080828154811061038f5761038e6109e9565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040d90610a18565b91505061036d565b50600067ffffffffffffffff81111561043157610430610a60565b5b60405190808252806020026020018201604052801561045f5781602001602082028036833780820191505090505b50600090805190602001906104759291906106a1565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049c90610ac0565b60006040518083038185875af1925050503d80600081146104d9576040519150601f19603f3d011682016040523d82523d6000602084013e6104de565b606091505b5050905080610522576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051990610b21565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b674563918244f4000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081815481106105a557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105e083610610565b90506000670de0b6b3a764000085836105f99190610b41565b6106039190610bb2565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561065e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106829190610c70565b5050509150506402540be400816106999190610ceb565b915050919050565b82805482825590600052602060002090810192821561071a579160200282015b828111156107195782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106c1565b5b509050610727919061072b565b5090565b5b8082111561074457600081600090555060010161072c565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107788261074d565b9050919050565b6107888161076d565b811461079357600080fd5b50565b6000813590506107a58161077f565b92915050565b6000602082840312156107c1576107c0610748565b5b60006107cf84828501610796565b91505092915050565b6000819050919050565b6107eb816107d8565b82525050565b600060208201905061080660008301846107e2565b92915050565b6000819050919050565b600061083161082c6108278461074d565b61080c565b61074d565b9050919050565b600061084382610816565b9050919050565b600061085582610838565b9050919050565b6108658161084a565b82525050565b6000602082019050610880600083018461085c565b92915050565b61088f8161076d565b82525050565b60006020820190506108aa6000830184610886565b92915050565b6108b9816107d8565b81146108c457600080fd5b50565b6000813590506108d6816108b0565b92915050565b6000602082840312156108f2576108f1610748565b5b6000610900848285016108c7565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b6000610950601383610909565b915061095b8261091a565b602082019050919050565b6000602082019050818103600083015261097f81610943565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109c0826107d8565b91506109cb836107d8565b92508282019050808211156109e3576109e2610986565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a23826107d8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a5557610a54610986565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610aaa600083610a8f565b9150610ab582610a9a565b600082019050919050565b6000610acb82610a9d565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b0b600b83610909565b9150610b1682610ad5565b602082019050919050565b60006020820190508181036000830152610b3a81610afe565b9050919050565b6000610b4c826107d8565b9150610b57836107d8565b9250828202610b65816107d8565b91508282048414831517610b7c57610b7b610986565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610bbd826107d8565b9150610bc8836107d8565b925082610bd857610bd7610b83565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c0281610be3565b8114610c0d57600080fd5b50565b600081519050610c1f81610bf9565b92915050565b6000819050919050565b610c3881610c25565b8114610c4357600080fd5b50565b600081519050610c5581610c2f565b92915050565b600081519050610c6a816108b0565b92915050565b600080600080600060a08688031215610c8c57610c8b610748565b5b6000610c9a88828901610c10565b9550506020610cab88828901610c46565b9450506040610cbc88828901610c5b565b9350506060610ccd88828901610c5b565b9250506080610cde88828901610c10565b9150509295509295909350565b6000610cf682610c25565b9150610d0183610c25565b9250828202610d0f81610c25565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610d4757610d46610986565b5b8282058414831517610d5c57610d5b610986565b5b509291505056fea264697066735822122017fec8539fbf1f53e4d03e3eecbc7d032957244ab10cc3ff33caaa9192561a8a64736f6c63430008110033",
    "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 70,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "funders",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 74,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "addressToAmountFunded",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 76,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "i_owner",
                "offset": 0,
                "slot": "2",
                "type": "t_address"
            },
            {
                "astId": 79,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "i_priceFeed",
                "offset": 0,
                "slot": "3",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
